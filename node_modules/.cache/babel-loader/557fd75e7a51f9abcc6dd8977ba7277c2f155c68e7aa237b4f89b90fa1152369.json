{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nconst Pagination = ({\n  onPageChange,\n  currentPage = 1,\n  totalItems,\n  itemsPerPage = 10,\n  startLabel = '<<',\n  prevLabel = '<',\n  nextLabel = '>',\n  endLabel = '>>',\n  pageNeighbours = 4,\n  withProgressBar = false,\n  onlyPageNumbers = false,\n  withGoToInput = false,\n  onlyPaginationButtons = false,\n  customClassNames = {}\n}) => {\n  const classNames = classes => {\n    return Object.entries(classes).filter(([, value]) => value).map(([key]) => key).join(' ');\n  };\n  const [pagiState, setPagiState] = useState();\n  const [goToInputValue, setGoToInputValue] = useState('');\n  const styleClassName = {\n    rpbRootClassName: customClassNames.rpbRootClassName || 'rpb-root',\n    rpbItemClassName: customClassNames.rpbItemClassName || 'rpb-item',\n    rpbItemClassNameActive: customClassNames.rpbItemClassNameActive || 'rpb-item--active',\n    rpbItemClassNameDisable: customClassNames.rpbItemClassNameDisable || 'rpb-item--disabled',\n    rpbProgressClassName: customClassNames.rpbProgressClassName || 'rpb-progress',\n    rpbGoItemClassName: customClassNames.rpbGoItemClassName || 'rpb-go-item'\n  };\n  /**\r\n   * Set new page when currentPage updates\r\n   */\n  useEffect(() => {\n    setPage(currentPage);\n  }, [currentPage]);\n  const setPage = page => {\n    // Disable clicking on a non-existent page\n    if (page < 1 || pagiState && page > pagiState.totalPages || typeof page !== 'number' || isNaN(page)) {\n      return;\n    }\n    // Remove the first rendering, and also cancel the click on the active page\n    if (page === currentPage) {\n      return;\n    }\n    // Send current page outside component\n    onPageChange(page);\n  };\n  const pagesList = useMemo(() => {\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\n    let startPage;\n    let endPage;\n    if (totalPages <= pageNeighbours * 2 + 1) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      if (currentPage <= pageNeighbours) {\n        startPage = 1;\n        endPage = pageNeighbours * 2 + 1;\n      } else if (currentPage + pageNeighbours >= totalPages) {\n        startPage = totalPages - pageNeighbours * 2;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - pageNeighbours;\n        endPage = currentPage + pageNeighbours;\n      }\n    }\n    return [...Array(endPage + 1 - startPage).keys()].map(i => startPage + i);\n  }, [totalItems, itemsPerPage, currentPage]);\n  useEffect(() => {\n    setPagiState({\n      pages: pagesList,\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pagesLength: pagesList.length,\n      totalPages: Math.ceil(totalItems / itemsPerPage) // all pages list length\n    });\n  }, [pagesList]);\n  const onGoToPageSubmitHandle = () => {\n    const value = Number(goToInputValue);\n    if (pagiState) {\n      if (value <= 0) {\n        setPage(1);\n      } else if (value > pagiState.totalPages) {\n        setPage(pagiState.totalPages);\n      } else {\n        setPage(value);\n      }\n    }\n  };\n  if (pagiState && totalItems > itemsPerPage) {\n    return React.createElement(\"nav\", {\n      className: styleClassName.rpbRootClassName\n    }, React.createElement(\"ul\", {\n      id: \"rpb-pagination\",\n      \"aria-label\": `Pagination Navigation, Current Page ${pagiState.currentPage}`\n    }, !onlyPageNumbers && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === 1\n      }),\n      \"aria-label\": 'Go to first page',\n      onClick: () => setPage(1)\n    }, startLabel)), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === 1\n      }),\n      \"aria-label\": 'Go to previous page',\n      onClick: () => setPage(pagiState.currentPage - 1)\n    }, prevLabel))), !onlyPaginationButtons && pagiState.pages && pagiState.pages.map((mappedPage, index) => React.createElement(\"li\", {\n      key: index\n    }, React.createElement(\"button\", {\n      \"aria-label\": `Go to Page ${mappedPage}`,\n      \"aria-current\": pagiState.currentPage === mappedPage,\n      onClick: () => setPage(mappedPage),\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameActive]: pagiState.currentPage === mappedPage\n      })\n    }, mappedPage))), !onlyPageNumbers && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"button\", {\n      onClick: () => setPage(pagiState.currentPage + 1),\n      \"aria-label\": \"Go to next page\",\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === pagiState.totalPages\n      })\n    }, nextLabel)), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: classNames({\n        [styleClassName.rpbItemClassName]: true,\n        [styleClassName.rpbItemClassNameDisable]: pagiState.currentPage === pagiState.totalPages\n      }),\n      \"aria-label\": 'Go to last page',\n      onClick: () => setPage(pagiState.totalPages)\n    }, endLabel))), withGoToInput && React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"div\", {\n      className: styleClassName.rpbGoItemClassName\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      onChange: e => setGoToInputValue(e.target.value)\n    }))), React.createElement(\"li\", null, React.createElement(\"button\", {\n      className: styleClassName.rpbItemClassName,\n      onClick: onGoToPageSubmitHandle\n    }, \"Go\")))), withProgressBar && React.createElement(\"div\", {\n      role: \"progressbar\",\n      \"aria-valuenow\": pagiState.currentPage !== 1 ? Math.round(pagiState.currentPage / pagiState.totalPages * 100) : 0,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      \"aria-labelledby\": \"rpb-pagination\",\n      className: styleClassName.rpbProgressClassName,\n      style: {\n        width: pagiState.currentPage !== 1 ? Math.round(pagiState.currentPage / pagiState.totalPages * 100) + '%' : 0 + '%'\n      }\n    }));\n  } else {\n    return null;\n  }\n};\nexport { Pagination };","map":{"version":3,"names":["Pagination","onPageChange","currentPage","totalItems","itemsPerPage","startLabel","prevLabel","nextLabel","endLabel","pageNeighbours","withProgressBar","onlyPageNumbers","withGoToInput","onlyPaginationButtons","customClassNames","classNames","classes","Object","entries","filter","value","map","key","join","pagiState","setPagiState","useState","goToInputValue","setGoToInputValue","styleClassName","rpbRootClassName","rpbItemClassName","rpbItemClassNameActive","rpbItemClassNameDisable","rpbProgressClassName","rpbGoItemClassName","useEffect","setPage","page","totalPages","isNaN","pagesList","useMemo","Math","ceil","startPage","endPage","Array","keys","i","pages","pagesLength","length","onGoToPageSubmitHandle","Number","React","createElement","className","id","Fragment","onClick","mappedPage","index","type","onChange","e","target","role","round","style","width"],"sources":["C:\\Users\\otavi\\OneDrive\\Área de Trabalho\\projeto_frontend\\livros_paginacao\\node_modules\\react-pagination-bar\\src\\Pagination.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\r\n\r\ntype RPBPagerState = {\r\n  totalItems: number;\r\n  currentPage: number;\r\n  pagesLength: number;\r\n  pages: number[];\r\n  totalPages: number;\r\n};\r\n\r\ntype RPBClassNamesCustomization = {\r\n  rpbRootClassName?: string;\r\n  rpbItemClassName?: string;\r\n  rpbItemClassNameActive?: string;\r\n  rpbItemClassNameDisable?: string;\r\n  rpbProgressClassName?: string;\r\n  rpbGoItemClassName?: string;\r\n};\r\n\r\ntype RPBPaginationProps = {\r\n  onPageChange: (pageNumber: number) => void;\r\n  currentPage: number;\r\n  totalItems: number;\r\n  itemsPerPage: number;\r\n  startLabel?: string | React.ReactNode;\r\n  prevLabel?: string | React.ReactNode;\r\n  nextLabel?: string | React.ReactNode;\r\n  endLabel?: string | React.ReactNode;\r\n  pageNeighbours?: number;\r\n  withProgressBar?: boolean;\r\n  onlyPageNumbers?: boolean;\r\n  onlyPaginationButtons?: boolean;\r\n  withGoToInput?: boolean;\r\n  customClassNames?: RPBClassNamesCustomization;\r\n};\r\n\r\nexport const Pagination: React.FC<RPBPaginationProps> = ({\r\n  onPageChange,\r\n  currentPage = 1,\r\n  totalItems,\r\n  itemsPerPage = 10,\r\n  startLabel = '<<',\r\n  prevLabel = '<',\r\n  nextLabel = '>',\r\n  endLabel = '>>',\r\n  pageNeighbours = 4,\r\n  withProgressBar = false,\r\n  onlyPageNumbers = false,\r\n  withGoToInput = false,\r\n  onlyPaginationButtons = false,\r\n  customClassNames = {},\r\n}) => {\r\n  const classNames = (classes: Record<string, boolean>): string => {\r\n    return Object.entries(classes)\r\n      .filter(([, value]) => value)\r\n      .map(([key]) => key)\r\n      .join(' ');\r\n  };\r\n\r\n  const [pagiState, setPagiState] = useState<RPBPagerState>();\r\n  const [goToInputValue, setGoToInputValue] = useState<string>('');\r\n\r\n  const styleClassName = {\r\n    rpbRootClassName: customClassNames.rpbRootClassName || 'rpb-root',\r\n    rpbItemClassName: customClassNames.rpbItemClassName || 'rpb-item',\r\n    rpbItemClassNameActive:\r\n      customClassNames.rpbItemClassNameActive || 'rpb-item--active',\r\n    rpbItemClassNameDisable:\r\n      customClassNames.rpbItemClassNameDisable || 'rpb-item--disabled',\r\n    rpbProgressClassName:\r\n      customClassNames.rpbProgressClassName || 'rpb-progress',\r\n    rpbGoItemClassName: customClassNames.rpbGoItemClassName || 'rpb-go-item',\r\n  } as Required<RPBClassNamesCustomization>;\r\n\r\n  /**\r\n   * Set new page when currentPage updates\r\n   */\r\n  useEffect(() => {\r\n    setPage(currentPage);\r\n  }, [currentPage]);\r\n\r\n  const setPage = (page: number): void => {\r\n    // Disable clicking on a non-existent page\r\n    if (\r\n      page < 1 ||\r\n      (pagiState && page > pagiState.totalPages) ||\r\n      typeof page !== 'number' ||\r\n      isNaN(page)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Remove the first rendering, and also cancel the click on the active page\r\n    if (page === currentPage) {\r\n      return;\r\n    }\r\n    // Send current page outside component\r\n    onPageChange(page);\r\n  };\r\n\r\n  const pagesList = useMemo((): number[] => {\r\n    const totalPages: number = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    let startPage: number;\r\n    let endPage: number;\r\n\r\n    if (totalPages <= pageNeighbours * 2 + 1) {\r\n      startPage = 1;\r\n      endPage = totalPages;\r\n    } else {\r\n      if (currentPage <= pageNeighbours) {\r\n        startPage = 1;\r\n        endPage = pageNeighbours * 2 + 1;\r\n      } else if (currentPage + pageNeighbours >= totalPages) {\r\n        startPage = totalPages - pageNeighbours * 2;\r\n        endPage = totalPages;\r\n      } else {\r\n        startPage = currentPage - pageNeighbours;\r\n        endPage = currentPage + pageNeighbours;\r\n      }\r\n    }\r\n\r\n    return [...Array(endPage + 1 - startPage).keys()].map((i) => startPage + i);\r\n  }, [totalItems, itemsPerPage, currentPage]);\r\n\r\n  useEffect(() => {\r\n    setPagiState({\r\n      pages: pagesList,\r\n      totalItems: totalItems,\r\n      currentPage: currentPage,\r\n      pagesLength: pagesList.length, // current rendered pages list length\r\n      totalPages: Math.ceil(totalItems / itemsPerPage), // all pages list length\r\n    });\r\n  }, [pagesList]);\r\n\r\n  const onGoToPageSubmitHandle = (): void => {\r\n    const value = Number(goToInputValue);\r\n\r\n    if (pagiState) {\r\n      if (value <= 0) {\r\n        setPage(1);\r\n      } else if (value > pagiState.totalPages) {\r\n        setPage(pagiState.totalPages);\r\n      } else {\r\n        setPage(value);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (pagiState && totalItems > itemsPerPage) {\r\n    return (\r\n      <nav className={styleClassName.rpbRootClassName}>\r\n        <ul\r\n          id=\"rpb-pagination\"\r\n          aria-label={`Pagination Navigation, Current Page ${pagiState.currentPage}`}>\r\n          {!onlyPageNumbers && (\r\n            <>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === 1,\r\n                  })}\r\n                  aria-label={'Go to first page'}\r\n                  onClick={() => setPage(1)}>\r\n                  {startLabel}\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === 1,\r\n                  })}\r\n                  aria-label={'Go to previous page'}\r\n                  onClick={() => setPage(pagiState.currentPage - 1)}>\r\n                  {prevLabel}\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n\r\n          {!onlyPaginationButtons &&\r\n            pagiState.pages &&\r\n            pagiState.pages.map((mappedPage, index) => (\r\n              <li key={index}>\r\n                <button\r\n                  aria-label={`Go to Page ${mappedPage}`}\r\n                  aria-current={pagiState.currentPage === mappedPage}\r\n                  onClick={() => setPage(mappedPage)}\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameActive]:\r\n                      pagiState.currentPage === mappedPage,\r\n                  })}>\r\n                  {mappedPage}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          {!onlyPageNumbers && (\r\n            <>\r\n              <li>\r\n                <button\r\n                  onClick={() => setPage(pagiState.currentPage + 1)}\r\n                  aria-label=\"Go to next page\"\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === pagiState.totalPages,\r\n                  })}>\r\n                  {nextLabel}\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={classNames({\r\n                    [styleClassName.rpbItemClassName]: true,\r\n                    [styleClassName.rpbItemClassNameDisable]:\r\n                      pagiState.currentPage === pagiState.totalPages,\r\n                  })}\r\n                  aria-label={'Go to last page'}\r\n                  onClick={() => setPage(pagiState.totalPages)}>\r\n                  {endLabel}\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n          {withGoToInput && (\r\n            <>\r\n              <li>\r\n                <div className={styleClassName.rpbGoItemClassName}>\r\n                  <input\r\n                    type=\"number\"\r\n                    onChange={(e) => setGoToInputValue(e.target.value)}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={styleClassName.rpbItemClassName}\r\n                  onClick={onGoToPageSubmitHandle}>\r\n                  Go\r\n                </button>\r\n              </li>\r\n            </>\r\n          )}\r\n        </ul>\r\n        {withProgressBar && (\r\n          <div\r\n            role=\"progressbar\"\r\n            aria-valuenow={\r\n              pagiState.currentPage !== 1\r\n                ? Math.round(\r\n                    (pagiState.currentPage / pagiState.totalPages) * 100\r\n                  )\r\n                : 0\r\n            }\r\n            aria-valuemin={0}\r\n            aria-valuemax={100}\r\n            aria-labelledby=\"rpb-pagination\"\r\n            className={styleClassName.rpbProgressClassName}\r\n            style={{\r\n              width:\r\n                pagiState.currentPage !== 1\r\n                  ? Math.round(\r\n                      (pagiState.currentPage / pagiState.totalPages) * 100\r\n                    ) + '%'\r\n                  : 0 + '%',\r\n            }}></div>\r\n        )}\r\n      </nav>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}